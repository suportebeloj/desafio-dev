// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package postgres

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO desafio_dev.public.transactions (type, date, value, cpf, card, time, owner, market)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, type, date, value, cpf, card, time, owner, market
`

type CreateTransactionParams struct {
	Type   string    `json:"type"`
	Date   time.Time `json:"date"`
	Value  float64   `json:"value"`
	Cpf    string    `json:"cpf"`
	Card   string    `json:"card"`
	Time   time.Time `json:"time"`
	Owner  string    `json:"owner"`
	Market string    `json:"market"`
}

type CreateTransactionRow struct {
	ID     int32     `json:"id"`
	Type   string    `json:"type"`
	Date   time.Time `json:"date"`
	Value  float64   `json:"value"`
	Cpf    string    `json:"cpf"`
	Card   string    `json:"card"`
	Time   time.Time `json:"time"`
	Owner  string    `json:"owner"`
	Market string    `json:"market"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.Type,
		arg.Date,
		arg.Value,
		arg.Cpf,
		arg.Card,
		arg.Time,
		arg.Owner,
		arg.Market,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Date,
		&i.Value,
		&i.Cpf,
		&i.Card,
		&i.Time,
		&i.Owner,
		&i.Market,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, type, date, value, cpf, card, time, owner, market
FROM desafio_dev.public.transactions
WHERE id = $1
`

type GetTransactionRow struct {
	ID     int32     `json:"id"`
	Type   string    `json:"type"`
	Date   time.Time `json:"date"`
	Value  float64   `json:"value"`
	Cpf    string    `json:"cpf"`
	Card   string    `json:"card"`
	Time   time.Time `json:"time"`
	Owner  string    `json:"owner"`
	Market string    `json:"market"`
}

func (q *Queries) GetTransaction(ctx context.Context, id int32) (GetTransactionRow, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i GetTransactionRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Date,
		&i.Value,
		&i.Cpf,
		&i.Card,
		&i.Time,
		&i.Owner,
		&i.Market,
	)
	return i, err
}

const listMarketTransaction = `-- name: ListMarketTransaction :many
SELECT id, type, date, value, cpf, card, time, owner, market
from desafio_dev.public.transactions
WHERE market = $1
`

type ListMarketTransactionRow struct {
	ID     int32     `json:"id"`
	Type   string    `json:"type"`
	Date   time.Time `json:"date"`
	Value  float64   `json:"value"`
	Cpf    string    `json:"cpf"`
	Card   string    `json:"card"`
	Time   time.Time `json:"time"`
	Owner  string    `json:"owner"`
	Market string    `json:"market"`
}

func (q *Queries) ListMarketTransaction(ctx context.Context, market string) ([]ListMarketTransactionRow, error) {
	rows, err := q.db.QueryContext(ctx, listMarketTransaction, market)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMarketTransactionRow
	for rows.Next() {
		var i ListMarketTransactionRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Date,
			&i.Value,
			&i.Cpf,
			&i.Card,
			&i.Time,
			&i.Owner,
			&i.Market,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMarkets = `-- name: ListMarkets :many
SELECT market
FROM desafio_dev.public.transactions
`

func (q *Queries) ListMarkets(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listMarkets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var market string
		if err := rows.Scan(&market); err != nil {
			return nil, err
		}
		items = append(items, market)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
